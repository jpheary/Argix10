//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace Argix.Crossmatch {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="VisTrakWebServiceSoap", Namespace="http://www.crossmatch.com/webservices/")]
    public partial class VisTrakWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LogOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchForKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckForBannedListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckVisitorForSignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveCurrentVisitorOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveVisitorOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyCurrentVisitorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyVisitorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveVisitorInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveVisitorInformationWithoutPhotoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisplayCurrentVisitorsDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisplayVisitorDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePhotoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMinutiaeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformSignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback VisitorHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnrollUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVisitorInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVisitorInformationAndLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintBadgeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignInItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPreEnrollListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkstationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterWorkstationOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePassThroughActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkstationsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public VisTrakWebService() {
            this.Url = global::Argix.Properties.Settings.Default.SecurityCenter_Crossmatch_VisTrakWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LogCompletedEventHandler LogCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event SignOutCompletedEventHandler SignOutCompleted;
        
        /// <remarks/>
        public event SearchForKeyCompletedEventHandler SearchForKeyCompleted;
        
        /// <remarks/>
        public event CheckForBannedListCompletedEventHandler CheckForBannedListCompleted;
        
        /// <remarks/>
        public event CheckVisitorForSignInCompletedEventHandler CheckVisitorForSignInCompleted;
        
        /// <remarks/>
        public event RetrieveCurrentVisitorCompletedEventHandler RetrieveCurrentVisitorCompleted;
        
        /// <remarks/>
        public event RetrieveVisitorCompletedEventHandler RetrieveVisitorCompleted;
        
        /// <remarks/>
        public event VerifyCurrentVisitorsCompletedEventHandler VerifyCurrentVisitorsCompleted;
        
        /// <remarks/>
        public event VerifyVisitorsCompletedEventHandler VerifyVisitorsCompleted;
        
        /// <remarks/>
        public event RetrieveVisitorInformationCompletedEventHandler RetrieveVisitorInformationCompleted;
        
        /// <remarks/>
        public event RetrieveVisitorInformationWithoutPhotoCompletedEventHandler RetrieveVisitorInformationWithoutPhotoCompleted;
        
        /// <remarks/>
        public event DisplayCurrentVisitorsDetailsCompletedEventHandler DisplayCurrentVisitorsDetailsCompleted;
        
        /// <remarks/>
        public event DisplayVisitorDetailsCompletedEventHandler DisplayVisitorDetailsCompleted;
        
        /// <remarks/>
        public event UpdatePhotoCompletedEventHandler UpdatePhotoCompleted;
        
        /// <remarks/>
        public event UpdateMinutiaeCompletedEventHandler UpdateMinutiaeCompleted;
        
        /// <remarks/>
        public event PerformSignInCompletedEventHandler PerformSignInCompleted;
        
        /// <remarks/>
        public event GetSettingsCompletedEventHandler GetSettingsCompleted;
        
        /// <remarks/>
        public event SearchCompletedEventHandler SearchCompleted;
        
        /// <remarks/>
        public event VisitorHistoryCompletedEventHandler VisitorHistoryCompleted;
        
        /// <remarks/>
        public event EnrollUserCompletedEventHandler EnrollUserCompleted;
        
        /// <remarks/>
        public event UpdateVisitorInformationCompletedEventHandler UpdateVisitorInformationCompleted;
        
        /// <remarks/>
        public event UpdateVisitorInformationAndLogCompletedEventHandler UpdateVisitorInformationAndLogCompleted;
        
        /// <remarks/>
        public event PrintBadgeCompletedEventHandler PrintBadgeCompleted;
        
        /// <remarks/>
        public event SignInItemsCompletedEventHandler SignInItemsCompleted;
        
        /// <remarks/>
        public event GetPreEnrollListCompletedEventHandler GetPreEnrollListCompleted;
        
        /// <remarks/>
        public event GetWorkstationCompletedEventHandler GetWorkstationCompleted;
        
        /// <remarks/>
        public event RegisterWorkstationCompletedEventHandler RegisterWorkstationCompleted;
        
        /// <remarks/>
        public event VerifyCompletedEventHandler VerifyCompleted;
        
        /// <remarks/>
        public event GetActivitiesCompletedEventHandler GetActivitiesCompleted;
        
        /// <remarks/>
        public event CreatePassThroughActivityCompletedEventHandler CreatePassThroughActivityCompleted;
        
        /// <remarks/>
        public event LogActivityCompletedEventHandler LogActivityCompleted;
        
        /// <remarks/>
        public event GetWorkstationsCompletedEventHandler GetWorkstationsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/Log", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Log(string taskID, string username, string actiontext) {
            this.Invoke("Log", new object[] {
                        taskID,
                        username,
                        actiontext});
        }
        
        /// <remarks/>
        public void LogAsync(string taskID, string username, string actiontext) {
            this.LogAsync(taskID, username, actiontext, null);
        }
        
        /// <remarks/>
        public void LogAsync(string taskID, string username, string actiontext, object userState) {
            if ((this.LogOperationCompleted == null)) {
                this.LogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogOperationCompleted);
            }
            this.InvokeAsync("Log", new object[] {
                        taskID,
                        username,
                        actiontext}, this.LogOperationCompleted, userState);
        }
        
        private void OnLogOperationCompleted(object arg) {
            if ((this.LogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/Login", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MobileLoginResponse Login(string username, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        username,
                        password});
            return ((MobileLoginResponse)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        username,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/SignOut", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSimpleResult SignOut(string VisitorID, int OperatorID, bool ManualAction, string macAddress, int group) {
            object[] results = this.Invoke("SignOut", new object[] {
                        VisitorID,
                        OperatorID,
                        ManualAction,
                        macAddress,
                        group});
            return ((VisTrakSimpleResult)(results[0]));
        }
        
        /// <remarks/>
        public void SignOutAsync(string VisitorID, int OperatorID, bool ManualAction, string macAddress, int group) {
            this.SignOutAsync(VisitorID, OperatorID, ManualAction, macAddress, group, null);
        }
        
        /// <remarks/>
        public void SignOutAsync(string VisitorID, int OperatorID, bool ManualAction, string macAddress, int group, object userState) {
            if ((this.SignOutOperationCompleted == null)) {
                this.SignOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignOutOperationCompleted);
            }
            this.InvokeAsync("SignOut", new object[] {
                        VisitorID,
                        OperatorID,
                        ManualAction,
                        macAddress,
                        group}, this.SignOutOperationCompleted, userState);
        }
        
        private void OnSignOutOperationCompleted(object arg) {
            if ((this.SignOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignOutCompleted(this, new SignOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/SearchForKey", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakKeyMatchResult SearchForKey(string mandatoryKey1, string mandatoryKey2, string optional) {
            object[] results = this.Invoke("SearchForKey", new object[] {
                        mandatoryKey1,
                        mandatoryKey2,
                        optional});
            return ((VisTrakKeyMatchResult)(results[0]));
        }
        
        /// <remarks/>
        public void SearchForKeyAsync(string mandatoryKey1, string mandatoryKey2, string optional) {
            this.SearchForKeyAsync(mandatoryKey1, mandatoryKey2, optional, null);
        }
        
        /// <remarks/>
        public void SearchForKeyAsync(string mandatoryKey1, string mandatoryKey2, string optional, object userState) {
            if ((this.SearchForKeyOperationCompleted == null)) {
                this.SearchForKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchForKeyOperationCompleted);
            }
            this.InvokeAsync("SearchForKey", new object[] {
                        mandatoryKey1,
                        mandatoryKey2,
                        optional}, this.SearchForKeyOperationCompleted, userState);
        }
        
        private void OnSearchForKeyOperationCompleted(object arg) {
            if ((this.SearchForKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchForKeyCompleted(this, new SearchForKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/CheckForBannedList", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakVisitorCheckResult CheckForBannedList(string firstName, string lastName) {
            object[] results = this.Invoke("CheckForBannedList", new object[] {
                        firstName,
                        lastName});
            return ((VisTrakVisitorCheckResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckForBannedListAsync(string firstName, string lastName) {
            this.CheckForBannedListAsync(firstName, lastName, null);
        }
        
        /// <remarks/>
        public void CheckForBannedListAsync(string firstName, string lastName, object userState) {
            if ((this.CheckForBannedListOperationCompleted == null)) {
                this.CheckForBannedListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckForBannedListOperationCompleted);
            }
            this.InvokeAsync("CheckForBannedList", new object[] {
                        firstName,
                        lastName}, this.CheckForBannedListOperationCompleted, userState);
        }
        
        private void OnCheckForBannedListOperationCompleted(object arg) {
            if ((this.CheckForBannedListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckForBannedListCompleted(this, new CheckForBannedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/CheckVisitorForSignIn", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakVisitorCheckResult CheckVisitorForSignIn(string visitorId) {
            object[] results = this.Invoke("CheckVisitorForSignIn", new object[] {
                        visitorId});
            return ((VisTrakVisitorCheckResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckVisitorForSignInAsync(string visitorId) {
            this.CheckVisitorForSignInAsync(visitorId, null);
        }
        
        /// <remarks/>
        public void CheckVisitorForSignInAsync(string visitorId, object userState) {
            if ((this.CheckVisitorForSignInOperationCompleted == null)) {
                this.CheckVisitorForSignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckVisitorForSignInOperationCompleted);
            }
            this.InvokeAsync("CheckVisitorForSignIn", new object[] {
                        visitorId}, this.CheckVisitorForSignInOperationCompleted, userState);
        }
        
        private void OnCheckVisitorForSignInOperationCompleted(object arg) {
            if ((this.CheckVisitorForSignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckVisitorForSignInCompleted(this, new CheckVisitorForSignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/RetrieveCurrentVisitor", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult RetrieveCurrentVisitor(string mandatorykey1, string mandatorykey2, string optional) {
            object[] results = this.Invoke("RetrieveCurrentVisitor", new object[] {
                        mandatorykey1,
                        mandatorykey2,
                        optional});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveCurrentVisitorAsync(string mandatorykey1, string mandatorykey2, string optional) {
            this.RetrieveCurrentVisitorAsync(mandatorykey1, mandatorykey2, optional, null);
        }
        
        /// <remarks/>
        public void RetrieveCurrentVisitorAsync(string mandatorykey1, string mandatorykey2, string optional, object userState) {
            if ((this.RetrieveCurrentVisitorOperationCompleted == null)) {
                this.RetrieveCurrentVisitorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCurrentVisitorOperationCompleted);
            }
            this.InvokeAsync("RetrieveCurrentVisitor", new object[] {
                        mandatorykey1,
                        mandatorykey2,
                        optional}, this.RetrieveCurrentVisitorOperationCompleted, userState);
        }
        
        private void OnRetrieveCurrentVisitorOperationCompleted(object arg) {
            if ((this.RetrieveCurrentVisitorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCurrentVisitorCompleted(this, new RetrieveCurrentVisitorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/RetrieveVisitor", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult RetrieveVisitor(string mandatorykey1, string mandatorykey2, string optional) {
            object[] results = this.Invoke("RetrieveVisitor", new object[] {
                        mandatorykey1,
                        mandatorykey2,
                        optional});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveVisitorAsync(string mandatorykey1, string mandatorykey2, string optional) {
            this.RetrieveVisitorAsync(mandatorykey1, mandatorykey2, optional, null);
        }
        
        /// <remarks/>
        public void RetrieveVisitorAsync(string mandatorykey1, string mandatorykey2, string optional, object userState) {
            if ((this.RetrieveVisitorOperationCompleted == null)) {
                this.RetrieveVisitorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveVisitorOperationCompleted);
            }
            this.InvokeAsync("RetrieveVisitor", new object[] {
                        mandatorykey1,
                        mandatorykey2,
                        optional}, this.RetrieveVisitorOperationCompleted, userState);
        }
        
        private void OnRetrieveVisitorOperationCompleted(object arg) {
            if ((this.RetrieveVisitorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveVisitorCompleted(this, new RetrieveVisitorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/VerifyCurrentVisitors", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult VerifyCurrentVisitors(string[] minutiae, int populationGroup) {
            object[] results = this.Invoke("VerifyCurrentVisitors", new object[] {
                        minutiae,
                        populationGroup});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyCurrentVisitorsAsync(string[] minutiae, int populationGroup) {
            this.VerifyCurrentVisitorsAsync(minutiae, populationGroup, null);
        }
        
        /// <remarks/>
        public void VerifyCurrentVisitorsAsync(string[] minutiae, int populationGroup, object userState) {
            if ((this.VerifyCurrentVisitorsOperationCompleted == null)) {
                this.VerifyCurrentVisitorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyCurrentVisitorsOperationCompleted);
            }
            this.InvokeAsync("VerifyCurrentVisitors", new object[] {
                        minutiae,
                        populationGroup}, this.VerifyCurrentVisitorsOperationCompleted, userState);
        }
        
        private void OnVerifyCurrentVisitorsOperationCompleted(object arg) {
            if ((this.VerifyCurrentVisitorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyCurrentVisitorsCompleted(this, new VerifyCurrentVisitorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/VerifyVisitors", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakKeyMatchResult VerifyVisitors(string mandatoryKey1, string mandatoryKey2, string optional, string[] minutiae, int position, bool one2one) {
            object[] results = this.Invoke("VerifyVisitors", new object[] {
                        mandatoryKey1,
                        mandatoryKey2,
                        optional,
                        minutiae,
                        position,
                        one2one});
            return ((VisTrakKeyMatchResult)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyVisitorsAsync(string mandatoryKey1, string mandatoryKey2, string optional, string[] minutiae, int position, bool one2one) {
            this.VerifyVisitorsAsync(mandatoryKey1, mandatoryKey2, optional, minutiae, position, one2one, null);
        }
        
        /// <remarks/>
        public void VerifyVisitorsAsync(string mandatoryKey1, string mandatoryKey2, string optional, string[] minutiae, int position, bool one2one, object userState) {
            if ((this.VerifyVisitorsOperationCompleted == null)) {
                this.VerifyVisitorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyVisitorsOperationCompleted);
            }
            this.InvokeAsync("VerifyVisitors", new object[] {
                        mandatoryKey1,
                        mandatoryKey2,
                        optional,
                        minutiae,
                        position,
                        one2one}, this.VerifyVisitorsOperationCompleted, userState);
        }
        
        private void OnVerifyVisitorsOperationCompleted(object arg) {
            if ((this.VerifyVisitorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyVisitorsCompleted(this, new VerifyVisitorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/RetrieveVisitorInformation", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult RetrieveVisitorInformation(string VisitorID) {
            object[] results = this.Invoke("RetrieveVisitorInformation", new object[] {
                        VisitorID});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveVisitorInformationAsync(string VisitorID) {
            this.RetrieveVisitorInformationAsync(VisitorID, null);
        }
        
        /// <remarks/>
        public void RetrieveVisitorInformationAsync(string VisitorID, object userState) {
            if ((this.RetrieveVisitorInformationOperationCompleted == null)) {
                this.RetrieveVisitorInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveVisitorInformationOperationCompleted);
            }
            this.InvokeAsync("RetrieveVisitorInformation", new object[] {
                        VisitorID}, this.RetrieveVisitorInformationOperationCompleted, userState);
        }
        
        private void OnRetrieveVisitorInformationOperationCompleted(object arg) {
            if ((this.RetrieveVisitorInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveVisitorInformationCompleted(this, new RetrieveVisitorInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/RetrieveVisitorInformationWithoutPhoto", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult RetrieveVisitorInformationWithoutPhoto(string VisitorID) {
            object[] results = this.Invoke("RetrieveVisitorInformationWithoutPhoto", new object[] {
                        VisitorID});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveVisitorInformationWithoutPhotoAsync(string VisitorID) {
            this.RetrieveVisitorInformationWithoutPhotoAsync(VisitorID, null);
        }
        
        /// <remarks/>
        public void RetrieveVisitorInformationWithoutPhotoAsync(string VisitorID, object userState) {
            if ((this.RetrieveVisitorInformationWithoutPhotoOperationCompleted == null)) {
                this.RetrieveVisitorInformationWithoutPhotoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveVisitorInformationWithoutPhotoOperationCompleted);
            }
            this.InvokeAsync("RetrieveVisitorInformationWithoutPhoto", new object[] {
                        VisitorID}, this.RetrieveVisitorInformationWithoutPhotoOperationCompleted, userState);
        }
        
        private void OnRetrieveVisitorInformationWithoutPhotoOperationCompleted(object arg) {
            if ((this.RetrieveVisitorInformationWithoutPhotoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveVisitorInformationWithoutPhotoCompleted(this, new RetrieveVisitorInformationWithoutPhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/DisplayCurrentVisitorsDetails", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult DisplayCurrentVisitorsDetails() {
            object[] results = this.Invoke("DisplayCurrentVisitorsDetails", new object[0]);
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void DisplayCurrentVisitorsDetailsAsync() {
            this.DisplayCurrentVisitorsDetailsAsync(null);
        }
        
        /// <remarks/>
        public void DisplayCurrentVisitorsDetailsAsync(object userState) {
            if ((this.DisplayCurrentVisitorsDetailsOperationCompleted == null)) {
                this.DisplayCurrentVisitorsDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisplayCurrentVisitorsDetailsOperationCompleted);
            }
            this.InvokeAsync("DisplayCurrentVisitorsDetails", new object[0], this.DisplayCurrentVisitorsDetailsOperationCompleted, userState);
        }
        
        private void OnDisplayCurrentVisitorsDetailsOperationCompleted(object arg) {
            if ((this.DisplayCurrentVisitorsDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisplayCurrentVisitorsDetailsCompleted(this, new DisplayCurrentVisitorsDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/DisplayVisitorDetails", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakKeyMatchResult DisplayVisitorDetails(string mandatoryKey1, string mandatoryKey2, string optional) {
            object[] results = this.Invoke("DisplayVisitorDetails", new object[] {
                        mandatoryKey1,
                        mandatoryKey2,
                        optional});
            return ((VisTrakKeyMatchResult)(results[0]));
        }
        
        /// <remarks/>
        public void DisplayVisitorDetailsAsync(string mandatoryKey1, string mandatoryKey2, string optional) {
            this.DisplayVisitorDetailsAsync(mandatoryKey1, mandatoryKey2, optional, null);
        }
        
        /// <remarks/>
        public void DisplayVisitorDetailsAsync(string mandatoryKey1, string mandatoryKey2, string optional, object userState) {
            if ((this.DisplayVisitorDetailsOperationCompleted == null)) {
                this.DisplayVisitorDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisplayVisitorDetailsOperationCompleted);
            }
            this.InvokeAsync("DisplayVisitorDetails", new object[] {
                        mandatoryKey1,
                        mandatoryKey2,
                        optional}, this.DisplayVisitorDetailsOperationCompleted, userState);
        }
        
        private void OnDisplayVisitorDetailsOperationCompleted(object arg) {
            if ((this.DisplayVisitorDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisplayVisitorDetailsCompleted(this, new DisplayVisitorDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/UpdatePhoto", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSimpleResult UpdatePhoto(string visitorID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] photo, string UserName, int WorkstationID) {
            object[] results = this.Invoke("UpdatePhoto", new object[] {
                        visitorID,
                        photo,
                        UserName,
                        WorkstationID});
            return ((VisTrakSimpleResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePhotoAsync(string visitorID, byte[] photo, string UserName, int WorkstationID) {
            this.UpdatePhotoAsync(visitorID, photo, UserName, WorkstationID, null);
        }
        
        /// <remarks/>
        public void UpdatePhotoAsync(string visitorID, byte[] photo, string UserName, int WorkstationID, object userState) {
            if ((this.UpdatePhotoOperationCompleted == null)) {
                this.UpdatePhotoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePhotoOperationCompleted);
            }
            this.InvokeAsync("UpdatePhoto", new object[] {
                        visitorID,
                        photo,
                        UserName,
                        WorkstationID}, this.UpdatePhotoOperationCompleted, userState);
        }
        
        private void OnUpdatePhotoOperationCompleted(object arg) {
            if ((this.UpdatePhotoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePhotoCompleted(this, new UpdatePhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/UpdateMinutiae", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSimpleResult UpdateMinutiae(string visitorID, string[] minutiae) {
            object[] results = this.Invoke("UpdateMinutiae", new object[] {
                        visitorID,
                        minutiae});
            return ((VisTrakSimpleResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMinutiaeAsync(string visitorID, string[] minutiae) {
            this.UpdateMinutiaeAsync(visitorID, minutiae, null);
        }
        
        /// <remarks/>
        public void UpdateMinutiaeAsync(string visitorID, string[] minutiae, object userState) {
            if ((this.UpdateMinutiaeOperationCompleted == null)) {
                this.UpdateMinutiaeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMinutiaeOperationCompleted);
            }
            this.InvokeAsync("UpdateMinutiae", new object[] {
                        visitorID,
                        minutiae}, this.UpdateMinutiaeOperationCompleted, userState);
        }
        
        private void OnUpdateMinutiaeOperationCompleted(object arg) {
            if ((this.UpdateMinutiaeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMinutiaeCompleted(this, new UpdateMinutiaeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/PerformSignIn", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSimpleResult PerformSignIn(string visitorID, int userId, int hostId, string host, int reasonId, bool update, int workStationID, int group) {
            object[] results = this.Invoke("PerformSignIn", new object[] {
                        visitorID,
                        userId,
                        hostId,
                        host,
                        reasonId,
                        update,
                        workStationID,
                        group});
            return ((VisTrakSimpleResult)(results[0]));
        }
        
        /// <remarks/>
        public void PerformSignInAsync(string visitorID, int userId, int hostId, string host, int reasonId, bool update, int workStationID, int group) {
            this.PerformSignInAsync(visitorID, userId, hostId, host, reasonId, update, workStationID, group, null);
        }
        
        /// <remarks/>
        public void PerformSignInAsync(string visitorID, int userId, int hostId, string host, int reasonId, bool update, int workStationID, int group, object userState) {
            if ((this.PerformSignInOperationCompleted == null)) {
                this.PerformSignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformSignInOperationCompleted);
            }
            this.InvokeAsync("PerformSignIn", new object[] {
                        visitorID,
                        userId,
                        hostId,
                        host,
                        reasonId,
                        update,
                        workStationID,
                        group}, this.PerformSignInOperationCompleted, userState);
        }
        
        private void OnPerformSignInOperationCompleted(object arg) {
            if ((this.PerformSignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformSignInCompleted(this, new PerformSignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/GetSettings", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult GetSettings(int ZoneID) {
            object[] results = this.Invoke("GetSettings", new object[] {
                        ZoneID});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetSettingsAsync(int ZoneID) {
            this.GetSettingsAsync(ZoneID, null);
        }
        
        /// <remarks/>
        public void GetSettingsAsync(int ZoneID, object userState) {
            if ((this.GetSettingsOperationCompleted == null)) {
                this.GetSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSettingsOperationCompleted);
            }
            this.InvokeAsync("GetSettings", new object[] {
                        ZoneID}, this.GetSettingsOperationCompleted, userState);
        }
        
        private void OnGetSettingsOperationCompleted(object arg) {
            if ((this.GetSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSettingsCompleted(this, new GetSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/Search", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult Search(string FirstName, string LastName, string user1, string user2, string user3, string user4, string user5, string user6, string user7, string user8, string user9, string user10, string Host, int Group, string SearchType) {
            object[] results = this.Invoke("Search", new object[] {
                        FirstName,
                        LastName,
                        user1,
                        user2,
                        user3,
                        user4,
                        user5,
                        user6,
                        user7,
                        user8,
                        user9,
                        user10,
                        Host,
                        Group,
                        SearchType});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void SearchAsync(string FirstName, string LastName, string user1, string user2, string user3, string user4, string user5, string user6, string user7, string user8, string user9, string user10, string Host, int Group, string SearchType) {
            this.SearchAsync(FirstName, LastName, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, Host, Group, SearchType, null);
        }
        
        /// <remarks/>
        public void SearchAsync(
                    string FirstName, 
                    string LastName, 
                    string user1, 
                    string user2, 
                    string user3, 
                    string user4, 
                    string user5, 
                    string user6, 
                    string user7, 
                    string user8, 
                    string user9, 
                    string user10, 
                    string Host, 
                    int Group, 
                    string SearchType, 
                    object userState) {
            if ((this.SearchOperationCompleted == null)) {
                this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOperationCompleted);
            }
            this.InvokeAsync("Search", new object[] {
                        FirstName,
                        LastName,
                        user1,
                        user2,
                        user3,
                        user4,
                        user5,
                        user6,
                        user7,
                        user8,
                        user9,
                        user10,
                        Host,
                        Group,
                        SearchType}, this.SearchOperationCompleted, userState);
        }
        
        private void OnSearchOperationCompleted(object arg) {
            if ((this.SearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/VisitorHistory", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult VisitorHistory(string visitorID) {
            object[] results = this.Invoke("VisitorHistory", new object[] {
                        visitorID});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void VisitorHistoryAsync(string visitorID) {
            this.VisitorHistoryAsync(visitorID, null);
        }
        
        /// <remarks/>
        public void VisitorHistoryAsync(string visitorID, object userState) {
            if ((this.VisitorHistoryOperationCompleted == null)) {
                this.VisitorHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVisitorHistoryOperationCompleted);
            }
            this.InvokeAsync("VisitorHistory", new object[] {
                        visitorID}, this.VisitorHistoryOperationCompleted, userState);
        }
        
        private void OnVisitorHistoryOperationCompleted(object arg) {
            if ((this.VisitorHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VisitorHistoryCompleted(this, new VisitorHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/EnrollUser", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakEnrollResult EnrollUser(
                    string firstName, 
                    string lastName, 
                    string user1, 
                    string user2, 
                    string user3, 
                    string user4, 
                    string user5, 
                    string user6, 
                    string user7, 
                    string user8, 
                    string user9, 
                    string user10, 
                    int visitorType, 
                    string comments, 
                    string[] minutiae, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] photo, 
                    string userName, 
                    int group, 
                    bool matchNameSearchandFingerPrintMatch) {
            object[] results = this.Invoke("EnrollUser", new object[] {
                        firstName,
                        lastName,
                        user1,
                        user2,
                        user3,
                        user4,
                        user5,
                        user6,
                        user7,
                        user8,
                        user9,
                        user10,
                        visitorType,
                        comments,
                        minutiae,
                        photo,
                        userName,
                        group,
                        matchNameSearchandFingerPrintMatch});
            return ((VisTrakEnrollResult)(results[0]));
        }
        
        /// <remarks/>
        public void EnrollUserAsync(
                    string firstName, 
                    string lastName, 
                    string user1, 
                    string user2, 
                    string user3, 
                    string user4, 
                    string user5, 
                    string user6, 
                    string user7, 
                    string user8, 
                    string user9, 
                    string user10, 
                    int visitorType, 
                    string comments, 
                    string[] minutiae, 
                    byte[] photo, 
                    string userName, 
                    int group, 
                    bool matchNameSearchandFingerPrintMatch) {
            this.EnrollUserAsync(firstName, lastName, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, visitorType, comments, minutiae, photo, userName, group, matchNameSearchandFingerPrintMatch, null);
        }
        
        /// <remarks/>
        public void EnrollUserAsync(
                    string firstName, 
                    string lastName, 
                    string user1, 
                    string user2, 
                    string user3, 
                    string user4, 
                    string user5, 
                    string user6, 
                    string user7, 
                    string user8, 
                    string user9, 
                    string user10, 
                    int visitorType, 
                    string comments, 
                    string[] minutiae, 
                    byte[] photo, 
                    string userName, 
                    int group, 
                    bool matchNameSearchandFingerPrintMatch, 
                    object userState) {
            if ((this.EnrollUserOperationCompleted == null)) {
                this.EnrollUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrollUserOperationCompleted);
            }
            this.InvokeAsync("EnrollUser", new object[] {
                        firstName,
                        lastName,
                        user1,
                        user2,
                        user3,
                        user4,
                        user5,
                        user6,
                        user7,
                        user8,
                        user9,
                        user10,
                        visitorType,
                        comments,
                        minutiae,
                        photo,
                        userName,
                        group,
                        matchNameSearchandFingerPrintMatch}, this.EnrollUserOperationCompleted, userState);
        }
        
        private void OnEnrollUserOperationCompleted(object arg) {
            if ((this.EnrollUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnrollUserCompleted(this, new EnrollUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/UpdateVisitorInformation", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult UpdateVisitorInformation(
                    string VisitorID, 
                    string firstName, 
                    string lastName, 
                    string user1, 
                    string user2, 
                    string user3, 
                    string user4, 
                    string user5, 
                    string user6, 
                    string user7, 
                    string user8, 
                    string user9, 
                    string user10, 
                    string comments, 
                    string statusID, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] photo, 
                    string[] minutiae, 
                    string UserName, 
                    int group) {
            object[] results = this.Invoke("UpdateVisitorInformation", new object[] {
                        VisitorID,
                        firstName,
                        lastName,
                        user1,
                        user2,
                        user3,
                        user4,
                        user5,
                        user6,
                        user7,
                        user8,
                        user9,
                        user10,
                        comments,
                        statusID,
                        photo,
                        minutiae,
                        UserName,
                        group});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVisitorInformationAsync(
                    string VisitorID, 
                    string firstName, 
                    string lastName, 
                    string user1, 
                    string user2, 
                    string user3, 
                    string user4, 
                    string user5, 
                    string user6, 
                    string user7, 
                    string user8, 
                    string user9, 
                    string user10, 
                    string comments, 
                    string statusID, 
                    byte[] photo, 
                    string[] minutiae, 
                    string UserName, 
                    int group) {
            this.UpdateVisitorInformationAsync(VisitorID, firstName, lastName, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, comments, statusID, photo, minutiae, UserName, group, null);
        }
        
        /// <remarks/>
        public void UpdateVisitorInformationAsync(
                    string VisitorID, 
                    string firstName, 
                    string lastName, 
                    string user1, 
                    string user2, 
                    string user3, 
                    string user4, 
                    string user5, 
                    string user6, 
                    string user7, 
                    string user8, 
                    string user9, 
                    string user10, 
                    string comments, 
                    string statusID, 
                    byte[] photo, 
                    string[] minutiae, 
                    string UserName, 
                    int group, 
                    object userState) {
            if ((this.UpdateVisitorInformationOperationCompleted == null)) {
                this.UpdateVisitorInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVisitorInformationOperationCompleted);
            }
            this.InvokeAsync("UpdateVisitorInformation", new object[] {
                        VisitorID,
                        firstName,
                        lastName,
                        user1,
                        user2,
                        user3,
                        user4,
                        user5,
                        user6,
                        user7,
                        user8,
                        user9,
                        user10,
                        comments,
                        statusID,
                        photo,
                        minutiae,
                        UserName,
                        group}, this.UpdateVisitorInformationOperationCompleted, userState);
        }
        
        private void OnUpdateVisitorInformationOperationCompleted(object arg) {
            if ((this.UpdateVisitorInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVisitorInformationCompleted(this, new UpdateVisitorInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/UpdateVisitorInformationAndLog", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult UpdateVisitorInformationAndLog(System.Data.DataSet original, System.Data.DataSet updated, string UserName, int WorkstationID) {
            object[] results = this.Invoke("UpdateVisitorInformationAndLog", new object[] {
                        original,
                        updated,
                        UserName,
                        WorkstationID});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVisitorInformationAndLogAsync(System.Data.DataSet original, System.Data.DataSet updated, string UserName, int WorkstationID) {
            this.UpdateVisitorInformationAndLogAsync(original, updated, UserName, WorkstationID, null);
        }
        
        /// <remarks/>
        public void UpdateVisitorInformationAndLogAsync(System.Data.DataSet original, System.Data.DataSet updated, string UserName, int WorkstationID, object userState) {
            if ((this.UpdateVisitorInformationAndLogOperationCompleted == null)) {
                this.UpdateVisitorInformationAndLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVisitorInformationAndLogOperationCompleted);
            }
            this.InvokeAsync("UpdateVisitorInformationAndLog", new object[] {
                        original,
                        updated,
                        UserName,
                        WorkstationID}, this.UpdateVisitorInformationAndLogOperationCompleted, userState);
        }
        
        private void OnUpdateVisitorInformationAndLogOperationCompleted(object arg) {
            if ((this.UpdateVisitorInformationAndLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVisitorInformationAndLogCompleted(this, new UpdateVisitorInformationAndLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/PrintBadge", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSimpleResult PrintBadge(string UserName, string VisitorId, int GateId, string UserType) {
            object[] results = this.Invoke("PrintBadge", new object[] {
                        UserName,
                        VisitorId,
                        GateId,
                        UserType});
            return ((VisTrakSimpleResult)(results[0]));
        }
        
        /// <remarks/>
        public void PrintBadgeAsync(string UserName, string VisitorId, int GateId, string UserType) {
            this.PrintBadgeAsync(UserName, VisitorId, GateId, UserType, null);
        }
        
        /// <remarks/>
        public void PrintBadgeAsync(string UserName, string VisitorId, int GateId, string UserType, object userState) {
            if ((this.PrintBadgeOperationCompleted == null)) {
                this.PrintBadgeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintBadgeOperationCompleted);
            }
            this.InvokeAsync("PrintBadge", new object[] {
                        UserName,
                        VisitorId,
                        GateId,
                        UserType}, this.PrintBadgeOperationCompleted, userState);
        }
        
        private void OnPrintBadgeOperationCompleted(object arg) {
            if ((this.PrintBadgeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintBadgeCompleted(this, new PrintBadgeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/SignInItems", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSignInItems SignInItems(string VisitorID) {
            object[] results = this.Invoke("SignInItems", new object[] {
                        VisitorID});
            return ((VisTrakSignInItems)(results[0]));
        }
        
        /// <remarks/>
        public void SignInItemsAsync(string VisitorID) {
            this.SignInItemsAsync(VisitorID, null);
        }
        
        /// <remarks/>
        public void SignInItemsAsync(string VisitorID, object userState) {
            if ((this.SignInItemsOperationCompleted == null)) {
                this.SignInItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignInItemsOperationCompleted);
            }
            this.InvokeAsync("SignInItems", new object[] {
                        VisitorID}, this.SignInItemsOperationCompleted, userState);
        }
        
        private void OnSignInItemsOperationCompleted(object arg) {
            if ((this.SignInItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignInItemsCompleted(this, new SignInItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/GetPreEnrollList", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult GetPreEnrollList() {
            object[] results = this.Invoke("GetPreEnrollList", new object[0]);
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPreEnrollListAsync() {
            this.GetPreEnrollListAsync(null);
        }
        
        /// <remarks/>
        public void GetPreEnrollListAsync(object userState) {
            if ((this.GetPreEnrollListOperationCompleted == null)) {
                this.GetPreEnrollListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPreEnrollListOperationCompleted);
            }
            this.InvokeAsync("GetPreEnrollList", new object[0], this.GetPreEnrollListOperationCompleted, userState);
        }
        
        private void OnGetPreEnrollListOperationCompleted(object arg) {
            if ((this.GetPreEnrollListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPreEnrollListCompleted(this, new GetPreEnrollListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/GetWorkstation", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult GetWorkstation(string macAddress) {
            object[] results = this.Invoke("GetWorkstation", new object[] {
                        macAddress});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkstationAsync(string macAddress) {
            this.GetWorkstationAsync(macAddress, null);
        }
        
        /// <remarks/>
        public void GetWorkstationAsync(string macAddress, object userState) {
            if ((this.GetWorkstationOperationCompleted == null)) {
                this.GetWorkstationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkstationOperationCompleted);
            }
            this.InvokeAsync("GetWorkstation", new object[] {
                        macAddress}, this.GetWorkstationOperationCompleted, userState);
        }
        
        private void OnGetWorkstationOperationCompleted(object arg) {
            if ((this.GetWorkstationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkstationCompleted(this, new GetWorkstationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/RegisterWorkstation", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult RegisterWorkstation(string macAddress, string description) {
            object[] results = this.Invoke("RegisterWorkstation", new object[] {
                        macAddress,
                        description});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterWorkstationAsync(string macAddress, string description) {
            this.RegisterWorkstationAsync(macAddress, description, null);
        }
        
        /// <remarks/>
        public void RegisterWorkstationAsync(string macAddress, string description, object userState) {
            if ((this.RegisterWorkstationOperationCompleted == null)) {
                this.RegisterWorkstationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterWorkstationOperationCompleted);
            }
            this.InvokeAsync("RegisterWorkstation", new object[] {
                        macAddress,
                        description}, this.RegisterWorkstationOperationCompleted, userState);
        }
        
        private void OnRegisterWorkstationOperationCompleted(object arg) {
            if ((this.RegisterWorkstationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterWorkstationCompleted(this, new RegisterWorkstationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/Verify", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult Verify(string firstName, string lastName, string user1, string user2, string user3, int populationGroup, int position, string[] minutiae) {
            object[] results = this.Invoke("Verify", new object[] {
                        firstName,
                        lastName,
                        user1,
                        user2,
                        user3,
                        populationGroup,
                        position,
                        minutiae});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyAsync(string firstName, string lastName, string user1, string user2, string user3, int populationGroup, int position, string[] minutiae) {
            this.VerifyAsync(firstName, lastName, user1, user2, user3, populationGroup, position, minutiae, null);
        }
        
        /// <remarks/>
        public void VerifyAsync(string firstName, string lastName, string user1, string user2, string user3, int populationGroup, int position, string[] minutiae, object userState) {
            if ((this.VerifyOperationCompleted == null)) {
                this.VerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyOperationCompleted);
            }
            this.InvokeAsync("Verify", new object[] {
                        firstName,
                        lastName,
                        user1,
                        user2,
                        user3,
                        populationGroup,
                        position,
                        minutiae}, this.VerifyOperationCompleted, userState);
        }
        
        private void OnVerifyOperationCompleted(object arg) {
            if ((this.VerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyCompleted(this, new VerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/GetActivities", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult GetActivities(string visitorID) {
            object[] results = this.Invoke("GetActivities", new object[] {
                        visitorID});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivitiesAsync(string visitorID) {
            this.GetActivitiesAsync(visitorID, null);
        }
        
        /// <remarks/>
        public void GetActivitiesAsync(string visitorID, object userState) {
            if ((this.GetActivitiesOperationCompleted == null)) {
                this.GetActivitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivitiesOperationCompleted);
            }
            this.InvokeAsync("GetActivities", new object[] {
                        visitorID}, this.GetActivitiesOperationCompleted, userState);
        }
        
        private void OnGetActivitiesOperationCompleted(object arg) {
            if ((this.GetActivitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivitiesCompleted(this, new GetActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/CreatePassThroughActivity", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSimpleResult CreatePassThroughActivity(string visitorID, string userName, int userID, int workstationID, int populationGroupID) {
            object[] results = this.Invoke("CreatePassThroughActivity", new object[] {
                        visitorID,
                        userName,
                        userID,
                        workstationID,
                        populationGroupID});
            return ((VisTrakSimpleResult)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePassThroughActivityAsync(string visitorID, string userName, int userID, int workstationID, int populationGroupID) {
            this.CreatePassThroughActivityAsync(visitorID, userName, userID, workstationID, populationGroupID, null);
        }
        
        /// <remarks/>
        public void CreatePassThroughActivityAsync(string visitorID, string userName, int userID, int workstationID, int populationGroupID, object userState) {
            if ((this.CreatePassThroughActivityOperationCompleted == null)) {
                this.CreatePassThroughActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePassThroughActivityOperationCompleted);
            }
            this.InvokeAsync("CreatePassThroughActivity", new object[] {
                        visitorID,
                        userName,
                        userID,
                        workstationID,
                        populationGroupID}, this.CreatePassThroughActivityOperationCompleted, userState);
        }
        
        private void OnCreatePassThroughActivityOperationCompleted(object arg) {
            if ((this.CreatePassThroughActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePassThroughActivityCompleted(this, new CreatePassThroughActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/LogActivity", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakSimpleResult LogActivity(string visitorId, string actionID, string comments, string userName, int userID, int workstationID, int populationGroupID) {
            object[] results = this.Invoke("LogActivity", new object[] {
                        visitorId,
                        actionID,
                        comments,
                        userName,
                        userID,
                        workstationID,
                        populationGroupID});
            return ((VisTrakSimpleResult)(results[0]));
        }
        
        /// <remarks/>
        public void LogActivityAsync(string visitorId, string actionID, string comments, string userName, int userID, int workstationID, int populationGroupID) {
            this.LogActivityAsync(visitorId, actionID, comments, userName, userID, workstationID, populationGroupID, null);
        }
        
        /// <remarks/>
        public void LogActivityAsync(string visitorId, string actionID, string comments, string userName, int userID, int workstationID, int populationGroupID, object userState) {
            if ((this.LogActivityOperationCompleted == null)) {
                this.LogActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogActivityOperationCompleted);
            }
            this.InvokeAsync("LogActivity", new object[] {
                        visitorId,
                        actionID,
                        comments,
                        userName,
                        userID,
                        workstationID,
                        populationGroupID}, this.LogActivityOperationCompleted, userState);
        }
        
        private void OnLogActivityOperationCompleted(object arg) {
            if ((this.LogActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogActivityCompleted(this, new LogActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossmatch.com/webservices/GetWorkstations", RequestNamespace="http://www.crossmatch.com/webservices/", ResponseNamespace="http://www.crossmatch.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VisTrakResult GetWorkstations(int populationgroup) {
            object[] results = this.Invoke("GetWorkstations", new object[] {
                        populationgroup});
            return ((VisTrakResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkstationsAsync(int populationgroup) {
            this.GetWorkstationsAsync(populationgroup, null);
        }
        
        /// <remarks/>
        public void GetWorkstationsAsync(int populationgroup, object userState) {
            if ((this.GetWorkstationsOperationCompleted == null)) {
                this.GetWorkstationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkstationsOperationCompleted);
            }
            this.InvokeAsync("GetWorkstations", new object[] {
                        populationgroup}, this.GetWorkstationsOperationCompleted, userState);
        }
        
        private void OnGetWorkstationsOperationCompleted(object arg) {
            if ((this.GetWorkstationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkstationsCompleted(this, new GetWorkstationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.crossmatch.com/webservices/")]
    public partial class MobileLoginResponse {
        
        private bool isResetField;
        
        private bool isSuccessfullField;
        
        private string messageField;
        
        private int securityGroupIDField;
        
        private int userIdField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public bool IsReset {
            get {
                return this.isResetField;
            }
            set {
                this.isResetField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSuccessfull {
            get {
                return this.isSuccessfullField;
            }
            set {
                this.isSuccessfullField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public int SecurityGroupID {
            get {
                return this.securityGroupIDField;
            }
            set {
                this.securityGroupIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.crossmatch.com/webservices/")]
    public partial class VisTrakSignInItems {
        
        private bool successField;
        
        private string messageField;
        
        private int totalNumberOfVisitsField;
        
        private int lastVisitsInField;
        
        private string lastHostField;
        
        /// <remarks/>
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public int totalNumberOfVisits {
            get {
                return this.totalNumberOfVisitsField;
            }
            set {
                this.totalNumberOfVisitsField = value;
            }
        }
        
        /// <remarks/>
        public int lastVisitsIn {
            get {
                return this.lastVisitsInField;
            }
            set {
                this.lastVisitsInField = value;
            }
        }
        
        /// <remarks/>
        public string lastHost {
            get {
                return this.lastHostField;
            }
            set {
                this.lastHostField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.crossmatch.com/webservices/")]
    public partial class VisTrakEnrollResult {
        
        private int errorField;
        
        private string messageField;
        
        private System.Data.DataSet datasetField;
        
        /// <remarks/>
        public int error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dataset {
            get {
                return this.datasetField;
            }
            set {
                this.datasetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.crossmatch.com/webservices/")]
    public partial class VisTrakResult {
        
        private bool successField;
        
        private string messageField;
        
        private System.Data.DataSet datasetField;
        
        /// <remarks/>
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dataset {
            get {
                return this.datasetField;
            }
            set {
                this.datasetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.crossmatch.com/webservices/")]
    public partial class VisTrakVisitorCheckResult {
        
        private int errorField;
        
        private string messageField;
        
        /// <remarks/>
        public int error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.crossmatch.com/webservices/")]
    public partial class VisTrakKeyMatchResult {
        
        private bool successField;
        
        private bool foundField;
        
        private bool optionalField;
        
        private string messageField;
        
        private string visitorIdField;
        
        private System.Data.DataSet datasetField;
        
        /// <remarks/>
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public bool found {
            get {
                return this.foundField;
            }
            set {
                this.foundField = value;
            }
        }
        
        /// <remarks/>
        public bool optional {
            get {
                return this.optionalField;
            }
            set {
                this.optionalField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string visitorId {
            get {
                return this.visitorIdField;
            }
            set {
                this.visitorIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dataset {
            get {
                return this.datasetField;
            }
            set {
                this.datasetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.crossmatch.com/webservices/")]
    public partial class VisTrakSimpleResult {
        
        private bool successField;
        
        private string messageField;
        
        /// <remarks/>
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MobileLoginResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MobileLoginResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SignOutCompletedEventHandler(object sender, SignOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSimpleResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSimpleResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchForKeyCompletedEventHandler(object sender, SearchForKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchForKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchForKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakKeyMatchResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakKeyMatchResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckForBannedListCompletedEventHandler(object sender, CheckForBannedListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckForBannedListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckForBannedListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakVisitorCheckResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakVisitorCheckResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckVisitorForSignInCompletedEventHandler(object sender, CheckVisitorForSignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckVisitorForSignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckVisitorForSignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakVisitorCheckResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakVisitorCheckResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RetrieveCurrentVisitorCompletedEventHandler(object sender, RetrieveCurrentVisitorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCurrentVisitorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCurrentVisitorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RetrieveVisitorCompletedEventHandler(object sender, RetrieveVisitorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveVisitorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveVisitorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyCurrentVisitorsCompletedEventHandler(object sender, VerifyCurrentVisitorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyCurrentVisitorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyCurrentVisitorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyVisitorsCompletedEventHandler(object sender, VerifyVisitorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyVisitorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyVisitorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakKeyMatchResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakKeyMatchResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RetrieveVisitorInformationCompletedEventHandler(object sender, RetrieveVisitorInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveVisitorInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveVisitorInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RetrieveVisitorInformationWithoutPhotoCompletedEventHandler(object sender, RetrieveVisitorInformationWithoutPhotoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveVisitorInformationWithoutPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveVisitorInformationWithoutPhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DisplayCurrentVisitorsDetailsCompletedEventHandler(object sender, DisplayCurrentVisitorsDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisplayCurrentVisitorsDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisplayCurrentVisitorsDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DisplayVisitorDetailsCompletedEventHandler(object sender, DisplayVisitorDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisplayVisitorDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisplayVisitorDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakKeyMatchResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakKeyMatchResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePhotoCompletedEventHandler(object sender, UpdatePhotoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSimpleResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSimpleResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateMinutiaeCompletedEventHandler(object sender, UpdateMinutiaeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMinutiaeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMinutiaeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSimpleResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSimpleResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PerformSignInCompletedEventHandler(object sender, PerformSignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerformSignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformSignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSimpleResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSimpleResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSettingsCompletedEventHandler(object sender, GetSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VisitorHistoryCompletedEventHandler(object sender, VisitorHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VisitorHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VisitorHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EnrollUserCompletedEventHandler(object sender, EnrollUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnrollUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnrollUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakEnrollResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakEnrollResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateVisitorInformationCompletedEventHandler(object sender, UpdateVisitorInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVisitorInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVisitorInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateVisitorInformationAndLogCompletedEventHandler(object sender, UpdateVisitorInformationAndLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVisitorInformationAndLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVisitorInformationAndLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PrintBadgeCompletedEventHandler(object sender, PrintBadgeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintBadgeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintBadgeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSimpleResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSimpleResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SignInItemsCompletedEventHandler(object sender, SignInItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignInItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignInItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSignInItems Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSignInItems)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPreEnrollListCompletedEventHandler(object sender, GetPreEnrollListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPreEnrollListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPreEnrollListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWorkstationCompletedEventHandler(object sender, GetWorkstationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkstationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkstationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterWorkstationCompletedEventHandler(object sender, RegisterWorkstationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterWorkstationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterWorkstationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyCompletedEventHandler(object sender, VerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActivitiesCompletedEventHandler(object sender, GetActivitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreatePassThroughActivityCompletedEventHandler(object sender, CreatePassThroughActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePassThroughActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePassThroughActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSimpleResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSimpleResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LogActivityCompletedEventHandler(object sender, LogActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakSimpleResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakSimpleResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWorkstationsCompletedEventHandler(object sender, GetWorkstationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkstationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkstationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisTrakResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisTrakResult)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591